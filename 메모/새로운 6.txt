영어단어장 프로그램 구현하기 (컬렉션Map사용)
메뉴] 1.등록 2.검색 3.수정 4.삭제 5.목록 6.종료

5/30
예외의 종류
1. checked exception
2. unchecked exception


예외발생원인
1. 프로그래머의 코딩실수 -> jvm이 예외 인스턴스를 생성
2. 프로그래머가 의도적으로 사용자정의 예외를 정의하고
   throw new 사용자정의예외()

사용자정의 예외정의하는 방법
1. checked exception
   Exception 클래스를 상속받아 정의
   
2. unchecked exception
   RuntimeException 클래스를 상속받아 정의
   
   
배열의 단점
1. 배열생성시 결정된 크기는 이후에 변동 불가.
2. null체크를 통한 성능 저하.


동일객체와 동등객체



동일객체(물리적) : 주민번호   => Object.hashCode() 
동등객체(논리적) : 이름이 같은, 성별이 같은, 혈액형이 같은. =>Object.equals() ==




컬렉션 내에서 객체비교
1. 사용자정의 클래스에 java.lang.Comparable 인터페이스구현하기
	=> 개념설계시 기본정렬기준을 설정하는 목적, compareTo()
	
	=> comparable를 구현하고있지않으면 ClassCastException 발생
  //<<오름차순>>
  //비교대상 객체가 동일하면 0을 반환
  //비교대상 객체보다 크면 1을 반환
  //비교대상 객체보다 작으면 -1을 반환
int result = 0;
        if (o1.getPrice() > o2.getPrice()) { //오름차순
          result = 1;
        } else if (o1.getPrice() < o2.getPrice()) {
          result = -1;
        }
        return result;


2. 컬렉션(검색,정렬) 생성시 생성자 매개값으로 java.util.Comparator 구현체 전달하기
	=> 컬렉션 생성시 비교연산자를 주입하여 정렬기준을 정의하는 방법.
	=> 사용자정의 클래스에서 구현된 CompareTo()보다 우선순위가 높다.
	
	compare();
  //o1 o2동등하면 0을리턴
  //o1가 o2보다 앞에오게하려면 음수리턴
  //o1가 o2보다 뒤에오게하려면 양수리턴
 if (this.price < o.price) { //내림차순
      return result = 1;
    } else if (this.price > o.price) {
      return result = -1;
    }

